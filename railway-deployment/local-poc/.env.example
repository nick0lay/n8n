# ============================================================================
# n8n with Custom Task Runners - Environment Configuration
# ============================================================================
# Copy this file to .env and customize for your local environment
#
# Quick Setup:
#   cp .env.example .env
#   # Edit values below
#   docker-compose build
#   docker-compose up -d
#

# ============================================================================
# Security & Authentication
# ============================================================================

# PostgreSQL Password
# IMPORTANT: Change this to a secure password
POSTGRES_PASSWORD=your_secure_password_here

# n8n Encryption Key
# IMPORTANT: Generate a random 32+ character string
# Example: openssl rand -base64 32
N8N_ENCRYPTION_KEY=your_random_32_character_encryption_key_change_me

# Task Runners Authentication Token
# IMPORTANT: Must match between n8n and runners services
# Example: openssl rand -base64 32
N8N_RUNNERS_AUTH_TOKEN=your_secure_runner_auth_token_change_me

# ============================================================================
# n8n Configuration
# ============================================================================

# n8n Host (for webhooks and public access)
N8N_HOST=localhost

# Protocol (http for local, https for production)
N8N_PROTOCOL=http

# Webhook URL (used for webhook nodes)
WEBHOOK_URL=http://localhost:5678/

# Timezone
GENERIC_TIMEZONE=America/New_York

# n8n Version (default: latest)
# You can pin to specific version: 1.75.0
N8N_VERSION=latest

# ============================================================================
# JavaScript Dependencies (Build-time)
# ============================================================================
# Add npm packages here in the format: package@version,package@version,...
# These are installed during Docker image build
#
# Syntax: package@version OR package@^version OR package@~version
# Example: moment@2.30.1,axios@^1.7.0,lodash@^4.17.21
#
# Popular packages you might want to add:
# - moment@2.30.1         - Date/time manipulation
# - axios@^1.7.0          - HTTP client
# - lodash@^4.17.21       - Utility functions
# - date-fns@^2.30.0      - Modern date utility
# - uuid@^9.0.0           - UUID generation
# - crypto-js@^4.2.0      - Cryptography
# - jsonwebtoken@^9.0.2   - JWT handling
# - node-fetch@^3.3.2     - Fetch API for Node.js
#
# Default: lightweight packages for fast initial build
JS_PACKAGES=moment@2.30.1,axios@^1.7.0,lodash@^4.17.21

# JavaScript Allow-List (Runtime - package names only, NO versions)
# This controls which packages can actually be used in Code nodes
# IMPORTANT: Must match the package names in JS_PACKAGES above
JS_ALLOW_LIST=moment,axios,lodash

# ============================================================================
# Python Dependencies (Build-time)
# ============================================================================
# Add pip packages here in the format: package==version,package==version,...
# These are installed during Docker image build
#
# Syntax: package==version OR package>=version
# Example: numpy==2.3.2,pandas==2.0.0,requests==2.31.0
#
# Popular packages you might want to add:
# - requests==2.31.0      - HTTP library (lightweight)
# - python-dateutil==2.8.2 - Date utilities (lightweight)
# - pyjwt==2.8.0          - JWT implementation (lightweight)
# - beautifulsoup4==4.12.3 - HTML/XML parsing (lightweight)
#
# Heavy packages (longer build time, ~5-10 minutes):
# - numpy==2.3.2          - Numerical computing
# - pandas==2.0.0         - Data analysis (requires numpy)
# - scipy==1.12.0         - Scientific computing
# - openpyxl==3.1.2       - Excel file handling
#
# Default: lightweight packages for fast initial build (~1 minute)
PY_PACKAGES=requests==2.31.0,python-dateutil==2.8.2

# Python Allow-List (Runtime - package names only, NO versions)
# This controls which packages can actually be used in Code nodes
# IMPORTANT: Must match the package names in PY_PACKAGES above
# Note: python-dateutil imports as 'dateutil'
PY_ALLOW_LIST=requests,dateutil

# Python Standard Library Allow-List
# These are built-in Python modules that don't need installation
PY_STDLIB_ALLOW=json,datetime,math,random

# ============================================================================
# Task Runner Performance
# ============================================================================

# Maximum concurrent tasks
N8N_RUNNERS_MAX_CONCURRENCY=5

# Task timeout in seconds
N8N_RUNNERS_TASK_TIMEOUT=60

# ============================================================================
# Optional: Runtime Overrides
# ============================================================================
# Normally, you don't need these because dependencies are baked into the image
# Uncomment only if you want to test different allow-lists without rebuilding
#
# JS_PACKAGES_OVERRIDE=moment,axios,lodash
# PY_PACKAGES_OVERRIDE=numpy,pandas,requests
#

# ============================================================================
# Notes
# ============================================================================
#
# IMPORTANT: When adding new packages, update BOTH variables:
#
# Example - Adding uuid package:
# 1. Add to build args:  JS_PACKAGES=moment@2.30.1,axios@^1.7.0,lodash@^4.17.21,uuid@^9.0.0
# 2. Add to allow-list:  JS_ALLOW_LIST=moment,axios,lodash,uuid
# 3. Rebuild: docker-compose build runners
# 4. Restart: docker-compose up -d runners
#
# Example - Adding numpy package:
# 1. Add to build args:  PY_PACKAGES=requests==2.31.0,python-dateutil==2.8.2,numpy==2.3.2
# 2. Add to allow-list:  PY_ALLOW_LIST=requests,dateutil,numpy
# 3. Rebuild: docker-compose build runners (will take 5-10 minutes)
# 4. Restart: docker-compose up -d runners
#
# 1. DEPENDENCY MANAGEMENT:
#    - JS_PACKAGES and PY_PACKAGES are BUILD ARGUMENTS
#    - Changes require rebuilding: docker-compose build runners
#    - The packages are INSTALLED into the Docker image
#    - The allow-list is auto-generated from package names
#
# 2. SECURITY:
#    - Keep this .env file secure and never commit to git
#    - Use strong passwords and encryption keys
#    - Limit dependencies to only what you need
#
# 3. UPDATING DEPENDENCIES:
#    - Edit JS_PACKAGES or PY_PACKAGES in this file
#    - Rebuild: docker-compose build runners
#    - Restart: docker-compose up -d runners
#
# 4. TESTING NEW PACKAGES:
#    - Add package to JS_PACKAGES or PY_PACKAGES
#    - Rebuild runner image
#    - Test in n8n Code node
#    - If import fails, check build logs: docker-compose logs runners
#
# 5. TROUBLESHOOTING:
#    - "Module not found": Package not installed or not in allow-list
#    - Check build logs: docker-compose logs --tail=100 runners
#    - Verify config: docker exec runners cat /etc/n8n-task-runners.json
#    - Test connection: docker-compose logs n8n | grep -i "task broker"
#
